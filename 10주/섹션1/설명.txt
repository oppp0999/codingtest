상수시간 시간복잡도 O(1)

상수시간 시간복잡도는 입력크기와 상관없이 일정한 시간복잡도를 가지는 것을 말하며 O(1)의 시간복잡도를 씁니다.

​

예를 들어 다음과 같은 부분들이 모두 O(1)의 시간복잡도를 가집니다. 

​

입력과 출력 

ex) cin, cout, scanf, printf 

​

곱하기 

a[2] *= 2;
 이외에도 곱하기, 나누기, 나머지연산, 빼기 등은 O(1)을 가집니다. 

​

간단한 비교 if문

if(a[2] == 2)
 ​

​

배열의 인덱스 참조  

int a[3] = {1, 2, 3};
int b = a[2];
 문제로 연습하는 시간복잡도

​

자 그러면 문제를 통해 배워보도록 하겠습니다. 

​

​

Q1. 다음 코드의 시간복잡도는?

#include<bits/stdc++.h>
using namespace std; 
int n;
int main(){
	cin >> n; 
	int a = 0;
	for(int i = 0; i < n; i++){
		for(int j = 0; j < i; j++){
			a += i + j; 
		}
	}
	cout << a << '\n';   
	return 0;
} 
 ​

​

​

​

​

​

O(n ^ 2)

​

​

 

​

Q2. 다음 코드의 시간복잡도는?

#include<bits/stdc++.h>
using namespace std;  
int N, M;
void solve(int N, int M){
	int a = 1; 
	for (int i = 0; i < N; i++) {
		a *= i;  
	}
	for (int j = 0; j < M; j++) {
		a *= j;   
	}
	cout << a << "\n"; 
}
int main(){
	cin >> N >> M; 
	solve(N, M);    
	return 0;
} 
 ​

​

​

​

​

​

​

​

​

​

​

O(N + M)

Q3. 다음 코드의 시간복잡도는?

#include<bits/stdc++.h>
using namespace std;  
int n, a[1004], cnt;
int go(int l, int r){ 
	if(l == r) return a[l];  
	int mid = (l + r) / 2; 
	int sum = go(l, mid) + go(mid + 1, r); 
	return sum;
}
int main(){
	cin >> n; 
	for(int i = 1; i <= n; i++){
		a[i - 1] = i; 
	}
	int sum = go(0, n - 1);
	cout << sum << '\n';  
} 
/*
입력
10

출력
45 
*/
 ​

​

​

​

​

​

​

​

​

​

​

O(n)

​

Q4. 다음 코드의 시간복잡도는?  

로그(log)는 지수 함수의 역함수이다. 어떤 수를 나타내기 위해 고정된 밑을 몇 번 곱하여야 하는지를 나타냅니다.

#include<bits/stdc++.h>
using namespace std;  
int N;
void solve(int N){
	int a = 0, i = N;
	while (i > 0) {
		a += i;
		i /= 2;
	} 
	cout << a << '\n';
}
int main(){
	cin >> N; 
	solve(N);    
	return 0;
} 
 ​

​

​

​

​

​

O(logN) 

Q5. 다음 코드의 시간복잡도는?  

#include<bits/stdc++.h>
using namespace std;  
int N, cnt;
void solve(int N){
	cnt++;
	cout << cnt << '\n';
	if(N == 0) return;
	for(int i = 0; i < 3; i++){
		solve(N - 1);
	} 
	return;
}
int main(){
	cin >> N; 
	solve(N);    
	return 0;
} 
 ​

등비수열의 합. 


​

​

​

​

​

​

​

3 ^ n

시간복잡도의 존재이유​ : 효율적인 코드의 척도

자 그러면 이 시간복잡도는 왜 필요할까요? 바로 효율적인 코드로 개선하는데 쓰이는 척도가 됩니다. 

$시간복잡도\ O\left(\combi{n}^2\right)을\ O\left(n\right)으로\ 줄였다$시간복잡도 O(n2)을 O(n)으로 줄였다​
라고 해봅시다. 이는 어떤 버튼을 누르고 화면이 나타나는데 9초이며 이 시간복잡도가 n^2인데 n으로 개선시킨다면 3초가 될 수도 있는 것이죠. 

​

자 그러면 알고리즘 문제를 풀 때를 보죠.  n의 크기가 10만이라고 해봅시다. 그러면 n ^ 2의 시간복잡도면 100억입니다. 문제에 따라 다르긴 하지만 보통 100억이면 잘 안됩니다...

그럴 때는 "아 조금 더 작은 시간복잡도의 알고리즘을 써야 하겠구나. 로직을 개선해볼까? O(nlogn) 이하의 알고리즘을 써볼까?" 라고 하는 생각의 기준점이 되는 것입니다. 

 

이 부분은 문제를 풀 때 매우 매우 중요합니다. 

항상 문제를 보고 문제로 부터 어떻게 풀어야 하는지 로직을 생각한 후 그 로직의 시간복잡도를 얼추 계산하고 그리고 나서 시간초과가 뜰 것 같은면 다른 낮은 시간복잡도를 가진 로직을 빠르게 생각하는 것이 코딩테스트 합격, 알고리즘 대회에서 높은 순위를 가질 수 있는 것의 기초가 됩니다.  
[출처] [알고리즘 강의] 1주차. 시간복잡도, 빅오표기법, 공간복잡도, 누적합, 구현|작성자 큰돌